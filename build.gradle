plugins {
    id 'org.checkerframework' version '0.6.2' apply false
    id "com.github.kt3k.coveralls" version "2.12.0" apply false
    id 'net.ltgt.errorprone' version '2.0.2' apply false
    id 'net.ltgt.nullaway' version '1.1.0' apply false
    id 'jacoco'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id "org.ajoberstar.grgit" version "4.0.2"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1"
    id 'maven-publish'
    id 'ru.vyarus.quality' version '4.7.0'
    id 'codenarc'
}

ext {
    versions = [
            'auto'               : '1.0.1',
            'findbugs'           : '3.0.1',
            'truth'              : '1.1.3',
            'commonsLang3'       : '3.12.0',
            'commonsCollections4': '4.4',
            'jackson'            : '2.13.0',
            'errorprone'         : '2.7.1',
            'errorproneJavac'    : '9+181-r4173-1',
            'nullAway'           : '0.7.9',
            'checkerFramework'   : '3.13.0',
            'junitJupiterEngine' : '5.8.2',
            'junitPlatform'      : '1.5.1',
            'jacoco'             : '0.8.7',
            'pmd'                : '6.38.0',
            'checkstyle'         : '9.0.1',
            'springBoot'         : '2.3.6.RELEASE',
            'springCore'         : '5.2.11.RELEASE',
            'micrometer'         : '1.5.7',
            'assertj'            : '3.21.0',
            'caffeine'           : '3.0.4',

            'jedis'              : '3.7.1',
            'lettuceCore'        : '6.1.6.RELEASE',
            'elasticacheClient'  : '1.1.2',
            'elasticacheSdk'     : '1.12.159',
            'cloudAwsCore'       : '2.4.1-SNAPSHOT',
            'springDataRedis'    : '2.6.1',
            'jmemcachedCore'     : '1.0.0',
            'servletApi'         : '4.0.1'
    ]

    deps = [
            'findbugsAnnotations'            : "com.google.code.findbugs:annotations:${versions.findbugs}",
            'truth'                          : "com.google.truth:truth:${versions.truth}",
            'commonsLang3'                   : "org.apache.commons:commons-lang3:${versions.commonsLang3}",
            'commonsCollections4'            : "org.apache.commons:commons-collections4:${versions.commonsCollections4}",
            'jacksonDataformatXml'           : "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${versions.jackson}",
            'jacksonDatabind'                : "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}",
            'errorprone'                     : "com.google.errorprone:error_prone_core:${versions.errorprone}",
            'errorproneJavac'                : "com.google.errorprone:javac:${versions.errorproneJavac}",
            'errorproneAnnotations'          : "com.google.errorprone:error_prone_annotations:${versions.errorprone}",
            'nullAway'                       : "com.uber.nullaway:nullaway:${versions.nullAway}",
            'checkerFramework'               : "org.checkerframework:checker:${versions.checkerFramework}",
            'checkerFrameworkQual'           : "org.checkerframework:checker-qual:${versions.checkerFramework}",
            'junitJupiterEngine'             : "org.junit.jupiter:junit-jupiter-engine:${versions.junitJupiterEngine}",
            'junitJupiterApi'                : "org.junit.jupiter:junit-jupiter-api:${versions.junitJupiterEngine}",
            'junitJupiterParams'             : "org.junit.jupiter:junit-jupiter-params:${versions.junitJupiterEngine}",
            'junitPlatformCommons'           : "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
            'junitPlatformEngine'            : "org.junit.platform:junit-platform-engine:${versions.junitPlatform}",
            'springBootStarter'              : "org.springframework.boot:spring-boot-starter:${versions.springBoot}",
            'springBootStarterWeb'           : "org.springframework.boot:spring-boot-starter-web:${versions.springBoot}",
            'springBootStarterWebflux'       : "org.springframework.boot:spring-boot-starter-webflux:${versions.springBoot}",
            'springBootStarterTest'          : "org.springframework.boot:spring-boot-starter-test:${versions.springBoot}",
            'springBootTest'                 : "org.springframework.boot:spring-boot-test:${versions.springBoot}",
            'springBootActuator'             : "org.springframework.boot:spring-boot-actuator:${versions.springBoot}",
            'springBootActuatorAutoconfigure': "org.springframework.boot:spring-boot-actuator-autoconfigure:${versions.springBoot}",
            'springContext'                  : "org.springframework:spring-context:${versions.springCore}",
            'autoService'                    : "com.google.auto.service:auto-service:${versions.auto}",
            'autoServiceAnnotations'         : "com.google.auto.service:auto-service-annotations:${versions.auto}",
            'micrometerCore'                 : "io.micrometer:micrometer-core:${versions.micrometer}",
            'assertjCore'                    : "org.assertj:assertj-core:${versions.assertj}",
            'caffeine'                       : "com.github.ben-manes.caffeine:caffeine:${versions.caffeine}",
            // do not upgrade yet, as there incompatibilities
            'jedis'                          : "redis.clients:jedis:${versions.jedis}",
            'lettuceCore'                    : "io.lettuce:lettuce-core:${versions.lettuceCore}",
            // https://mvnrepository.com/artifact/com.amazonaws/elasticache-java-cluster-client/1.1.2
            // provide your own implementation if you want to get rid off the CVEs
            'elasticacheClient'              : "com.amazonaws:elasticache-java-cluster-client:${versions.elasticacheClient}",
            'elasticacheSdk'                 : "com.amazonaws:aws-java-sdk-elasticache:${versions.elasticacheSdk}",
            'springDataRedis'                : "org.springframework.data:spring-data-redis:${versions.springDataRedis}",
            'cloudAwsCore'                   : "io.awspring.cloud:spring-cloud-aws-core:${versions.cloudAwsCore}",
            'servletApi'                     : "javax.servlet:javax.servlet-api:${versions.servletApi}",
            'jmemcachedCore'                 : "com.thimbleware.jmemcached:jmemcached-core:${versions.jmemcachedCore}"
    ]

    getArtifactId = { project ->
        return project.name
    }
}

allprojects {
    group = 'io.mttrbit.spring.caches'
    ext.artifactId = getArtifactId(project)
    version = '0.0.1'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    jacoco {
        toolVersion = versions.jacoco
    }
}

subprojects { subproject ->
    apply plugin: 'java-library'
    apply plugin: 'org.checkerframework'
    apply plugin: "ru.vyarus.quality"
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'net.ltgt.nullaway'
    apply plugin: 'idea'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    dependencies {
        compileOnly deps.checkerFrameworkQual
        compileOnly deps.errorproneAnnotations
        checkerFramework deps.checkerFramework
        errorprone deps.errorprone
        errorproneJavac deps.errorproneJavac
        errorprone deps.nullAway

        testCompileOnly deps.checkerFrameworkQual
        testCompileOnly deps.errorproneAnnotations

        compileOnly deps.findbugsAnnotations

        compileOnly deps.junitJupiterParams

        testImplementation deps.jacksonDatabind
        testImplementation deps.junitJupiterParams
        testImplementation deps.junitJupiterApi
        // required for executing $> gradle test
        testRuntimeOnly deps.junitJupiterEngine
        testRuntimeOnly deps.junitPlatformCommons
        testRuntimeOnly deps.junitPlatformEngine
    }

    javadoc {
        options.links.add('https://docs.oracle.com/en/java/javase/11/docs/api/')
        options.addBooleanOption('Xdoclint:-missing', true)
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier.set('sources')
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier.set('javadoc')
    }

    task removeIdeaOutDirectory(type: Delete) {
        file("${projectDir}/out").deleteDir()
    }

    clean {
        dependsOn(removeIdeaOutDirectory)
    }

    checkerFramework {
        excludeTests = true
        if (project.hasProperty('enableCheckerframework')) {
            checkers = [
                    'org.checkerframework.checker.nullness.NullnessChecker'
            ]
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.encoding = 'utf-8'
        options.errorprone {
            enabled = subproject.hasProperty('enableErrorprone')

            nullaway {
                annotatedPackages.add('spring.caches')
                excludedFieldAnnotations = ['org.checkerframework.checker.nullness.qual.MonotonicNonNull']
            }
        }
    }

    compileTestJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.errorprone.enabled = false
    }

    quality {
        checkstyleVersion = versions.checkstyle
        pmdVersion = versions.pmd
        pmd = true
        pmdIncremental = true
        configDir = 'config/'
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    tasks.withType(Test) {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'skipped', 'failed'
            showCauses true
        }

        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest result: ${result.resultType}"
                println "Test summary: ${result.testCount} tests, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped"
            }
        }
    }

    idea {
        module {
            downloadJavadoc = true // defaults to false
            downloadSources = true
        }
    }
}

/** This task generates an aggregate Javadoc for all published modules (except benchmarks). */
task rootJavadoc(type: Javadoc) {
    source subprojects.stream().collect { project -> project.sourceSets.main.allJava }
    classpath = files(subprojects.stream().collect { project -> project.sourceSets.main.compileClasspath })

    options.links.add('https://docs.oracle.com/en/java/javase/16/docs/api/')
    options.addBooleanOption('Xdoclint:-missing', true)
    options.addStringOption('doctitle', "Spring Boot Caches ${project.version} API")
    options.addStringOption('windowtitle', "Spring Boot Caches ${project.version} API")
    destinationDir = file("${project.buildDir}/docs/javadoc")
}
