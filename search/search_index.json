{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spring Boot Caches \u00b6 What is it? \u00b6 Spring Boot's cache suite greatly facilitates the application's introduction of cache programming and simplifies the configuration and usage of caches in a Spring Boot based application. Despite its simplicity and its configurability Spring Boot does not provide good support for two-level or multi-level caching. Some business scenarios require both local and remote caching and/or a higher degree of caching configuration flexibility. Spring Boot Caches tries to address these shortcomings by providing an alternative that replaces the cache specific logic of Spring Context Support enabling the usage of different caches and with varying cache configurations simultaneously. Benefits \u00b6 This projects introduces a new property spring.caches , that represents a map of cache backends. For each cache backend one may define one or many groups of cache names, each having their own default or custom cache configuration. How to use Spring Boot Caches \u00b6 The easiest way is to use the starter dependency maven : <dependency> <groupId> io.mttrbit.spring.caches </groupId> <artifactId> spring-caches-starter </artifactId> <version> 0.0.1 </version> </dependency> gradle : implementation \"io.mttrbit.spring.caches:spring-caches-starter:0.0.1\" If no cache backend is found on classpath, a very simple default backend is loaded - basically an instance of a ConcurrentMap. In this case an application developer just needs to define a set of names using the property spring.caches.names . For production facing use cases, we recommend using the caching backends and configure them properly, e.g. spring: caches: Caffeine: - names: name1, name2, name3 config: spec: recordStats - names: name4 The example above looks for the caffeine caching backend and instantiates four caches. Three of them will record cache stats. Note At the moment, Spring Boot Caches supports a simple cache and caffeine but more backends are planned. All backends support Spring Boot Actuator metrics. Restrictions \u00b6 Do not use Spring Caches in conjunction with Spring Context Support. Caches must be predefined using application properties (static mode). Cache names must be globally unique. More information \u00b6 Spring Boot Caches was designed and implemented by Sebastian Kaiser. Where possible, it reuses existing but customized solutions when applicable in order to achieve the goal of providing better support for two-level or multi-level caching in Spring Boot.","title":"Overview"},{"location":"#spring-boot-caches","text":"","title":"Spring Boot Caches"},{"location":"#what-is-it","text":"Spring Boot's cache suite greatly facilitates the application's introduction of cache programming and simplifies the configuration and usage of caches in a Spring Boot based application. Despite its simplicity and its configurability Spring Boot does not provide good support for two-level or multi-level caching. Some business scenarios require both local and remote caching and/or a higher degree of caching configuration flexibility. Spring Boot Caches tries to address these shortcomings by providing an alternative that replaces the cache specific logic of Spring Context Support enabling the usage of different caches and with varying cache configurations simultaneously.","title":"What is it?"},{"location":"#benefits","text":"This projects introduces a new property spring.caches , that represents a map of cache backends. For each cache backend one may define one or many groups of cache names, each having their own default or custom cache configuration.","title":"Benefits"},{"location":"#how-to-use-spring-boot-caches","text":"The easiest way is to use the starter dependency maven : <dependency> <groupId> io.mttrbit.spring.caches </groupId> <artifactId> spring-caches-starter </artifactId> <version> 0.0.1 </version> </dependency> gradle : implementation \"io.mttrbit.spring.caches:spring-caches-starter:0.0.1\" If no cache backend is found on classpath, a very simple default backend is loaded - basically an instance of a ConcurrentMap. In this case an application developer just needs to define a set of names using the property spring.caches.names . For production facing use cases, we recommend using the caching backends and configure them properly, e.g. spring: caches: Caffeine: - names: name1, name2, name3 config: spec: recordStats - names: name4 The example above looks for the caffeine caching backend and instantiates four caches. Three of them will record cache stats. Note At the moment, Spring Boot Caches supports a simple cache and caffeine but more backends are planned. All backends support Spring Boot Actuator metrics.","title":"How to use Spring Boot Caches"},{"location":"#restrictions","text":"Do not use Spring Caches in conjunction with Spring Context Support. Caches must be predefined using application properties (static mode). Cache names must be globally unique.","title":"Restrictions"},{"location":"#more-information","text":"Spring Boot Caches was designed and implemented by Sebastian Kaiser. Where possible, it reuses existing but customized solutions when applicable in order to achieve the goal of providing better support for two-level or multi-level caching in Spring Boot.","title":"More information"},{"location":"CHANGELOG/","text":"Changelog \u00b6 Version 1.0.0 \u00b6","title":"Change Log"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#version-100","text":"","title":"Version 1.0.0"},{"location":"CONTRIBUTING/","text":"How to contribute \u00b6 We'd love to accept your patches and contributions to this project. There are a just a few small guidelines you need to follow. Submitting a patch \u00b6 It's generally best to start by opening a new issue describing the bug or feature you're intending to fix. Even if you think it's relatively minor, it's helpful to know what people are working on. Mention in the initial issue that you are planning to work on that bug or feature so that it can be assigned to you. Follow the normal process of forking the project, and setup a new branch to work in. It's important that each group of changes be done in separate branches in order to ensure that a pull request only includes the commits related to that bug or feature. Any significant changes should almost always be accompanied by tests. If the project lacks good test coverage, please do not hesitate to add missing tests. Do your best to have well-formed commit messages for each change. This provides consistency throughout the project, and ensures that commit messages are able to be formatted properly by various git tools. Finally, push the commits to your fork and submit a merge request .","title":"Contributing"},{"location":"CONTRIBUTING/#how-to-contribute","text":"We'd love to accept your patches and contributions to this project. There are a just a few small guidelines you need to follow.","title":"How to contribute"},{"location":"CONTRIBUTING/#submitting-a-patch","text":"It's generally best to start by opening a new issue describing the bug or feature you're intending to fix. Even if you think it's relatively minor, it's helpful to know what people are working on. Mention in the initial issue that you are planning to work on that bug or feature so that it can be assigned to you. Follow the normal process of forking the project, and setup a new branch to work in. It's important that each group of changes be done in separate branches in order to ensure that a pull request only includes the commits related to that bug or feature. Any significant changes should almost always be accompanied by tests. If the project lacks good test coverage, please do not hesitate to add missing tests. Do your best to have well-formed commit messages for each change. This provides consistency throughout the project, and ensures that commit messages are able to be formatted properly by various git tools. Finally, push the commits to your fork and submit a merge request .","title":"Submitting a patch"},{"location":"best_practices/","text":"Best practices \u00b6","title":"Best Practices"},{"location":"best_practices/#best-practices","text":"","title":"Best practices"},{"location":"providers/caffeine/","text":"Caffeine Cache Provider \u00b6 Uses Caffeine as the cache backend. Install \u00b6 maven : <dependency> <groupId> io.mttrbit.spring.caches </groupId> <artifactId> caffeine-cache-provider </artifactId> <version> 0.0.1 </version> </dependency> gradle : implementation \"io.mttrbit.spring.caches:caffeine-cache-provider:0.0.1\" Configuration \u00b6","title":"Caffeine"},{"location":"providers/caffeine/#caffeine-cache-provider","text":"Uses Caffeine as the cache backend.","title":"Caffeine Cache Provider"},{"location":"providers/caffeine/#install","text":"maven : <dependency> <groupId> io.mttrbit.spring.caches </groupId> <artifactId> caffeine-cache-provider </artifactId> <version> 0.0.1 </version> </dependency> gradle : implementation \"io.mttrbit.spring.caches:caffeine-cache-provider:0.0.1\"","title":"Install"},{"location":"providers/caffeine/#configuration","text":"","title":"Configuration"},{"location":"providers/memcache/","text":"Memcache Cache Provider \u00b6 To be defined.","title":"Memcache"},{"location":"providers/memcache/#memcache-cache-provider","text":"To be defined.","title":"Memcache Cache Provider"},{"location":"providers/simple/","text":"Simple Cache Backend Provider \u00b6 Is a very simple cache that can be used for testing or prototyping scenarios. This cache is based on a simple ConcurrentHashMap and reuses Caffeine's CacheStats implementation to support Spring Actuator Metrics. Do not use it in production facing use cases! Install \u00b6 maven : <dependency> <groupId> io.mttrbit.spring.caches </groupId> <artifactId> simple-cache-provider </artifactId> <version> 0.0.1 </version> </dependency> gradle : implementation \"io.mttrbit.spring.caches:simple-cache-provider:0.0.1\" Configuration \u00b6","title":"Simple"},{"location":"providers/simple/#simple-cache-backend-provider","text":"Is a very simple cache that can be used for testing or prototyping scenarios. This cache is based on a simple ConcurrentHashMap and reuses Caffeine's CacheStats implementation to support Spring Actuator Metrics. Do not use it in production facing use cases!","title":"Simple Cache Backend Provider"},{"location":"providers/simple/#install","text":"maven : <dependency> <groupId> io.mttrbit.spring.caches </groupId> <artifactId> simple-cache-provider </artifactId> <version> 0.0.1 </version> </dependency> gradle : implementation \"io.mttrbit.spring.caches:simple-cache-provider:0.0.1\"","title":"Install"},{"location":"providers/simple/#configuration","text":"","title":"Configuration"}]}